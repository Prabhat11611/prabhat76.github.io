*{
    margin:0%;
    padding:0%;
    font-size: 20px;

}
h1{
    font-family: Arial, Helvetica, sans-serif;
    font-size:45px;
    text-align: center;
    text-decoration: solid;
}
input[type=text],select, textarea {
    width:100%; padding: 12px; border:1px solid blue; border-radius:4px; box-sizing:border-box;
    margin-top:6px; margin-bottom: 16px; resize: vertical;
}
input[type=submit]{
    background-color:aqua; color: white; padding:12px 20px; border: none; border-radius: 4px; cursor:pointer;
}
input[type=submit]{
    background-color:rgb(102, 105, 201);
}
form{
    background-color:rgb(73, 153, 234);
    border-radius:5px;
    padding:20px;
}

/*
Javascript Code




const sheetName = 'Sheet1'
const scriptProp = PropertiesService.getScriptProperties()

function intialSetup () {
  const activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet()
  scriptProp.setProperty('key', activeSpreadsheet.getId())
}

function doPost (e) {
  const lock = LockService.getScriptLock()
  lock.tryLock(10000)

  try {
    const doc = SpreadsheetApp.openById(scriptProp.getProperty('key'))
    const sheet = doc.getSheetByName(sheetName)

    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]
    const nextRow = sheet.getLastRow() + 1

    const newRow = headers.map(function(header) {
      return header === 'Date' ? new Date() : e.parameter[header]
    })

    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow])

    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))
      .setMimeType(ContentService.MimeType.JSON)
  }

  catch (e) {
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))
      .setMimeType(ContentService.MimeType.JSON)
  }

  finally {
    lock.releaseLock()
  }
}


*/


/* Deployment ID
AKfycbwUB3i74ThIo8pInANItadR9lhZaCqPadRB6M8poiDVDBC4gBbMTYJTdQbcz7mLNTjD4Q
*/